@page "/fetchplayerlist"
@using Kusto.Cloud.Platform.Utils
@using PlayFabBuddy.UI.Data

<PageTitle>Player List</PageTitle>
@inject PlayFabService PlayFabService

<h1>Ban Players</h1>
<hr/>

<h2>Enter the IP Address to Ban</h2>
<input @bind="IpAddressToBan"/>
<button class="btn btn-primary" @onclick="SearchPlayersByIp">Submit</button>

<button class="btn btn-secondary" @onclick="BanPlayer">Ban all players with this IP Address</button>


@if (ShowSpinner)
{
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only"></span>
    </div>
}
else
{
    <div></div>
}

@if (_players != null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Player Id</th>
            <th>Title Id</th>
            <th>Last Known IP</th>
            <th>Is Banned</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var player in _players)
        {
            <tr>
                <td>@player.Id</td>
                <td>@player.TitleId</td>
                <td>@player.LastKnownIP</td>
                <td>@player.IsBanned</td>
                <td>
                    @if (player.MasterPlayerAccountId.IsNotNullOrEmpty() && player.CustomId.IsNotNullOrEmpty() && player.TitleId.IsNotNullOrEmpty() && player.Id.IsNotNullOrEmpty())
                    {
                        <button class="btn btn-primary" disabled="@player.IsBanned" @onclick="() => BanSinglePlayer(player.MasterPlayerAccountId!, player.CustomId!, player.TitleId!, player.Id!)">Ban this player</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" disabled=@true>Player Broken</button>
                    }
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@if (ShowLoadingBar)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <p></p>
}

@code {
    private PlayerData[]? _players;

    private string? IpAddressToBan { get; set; }
    private bool ShowLoadingBar { get; set; }
    private bool ShowSpinner { get; set; }

    // Ban a player based on an IP address
    private async void BanPlayer()
    {
        // Check for null and do nothing if no IP Address entered
        if (string.IsNullOrEmpty(IpAddressToBan))
        {
            return;
        }

        ShowSpinner = true;

        // Ban the players
        await PlayFabService.BanPlayerByIpAsync(IpAddressToBan);

        // Reload the data again
        _players = await PlayFabService.GetPlayersAsync(IpAddressToBan);

        ShowSpinner = false;

        StateHasChanged();
    }

    private async void BanSinglePlayer(string masterPlayerAccountId, string customId, string titleId, string id)
    {
        // Check for null and do nothing if no IP Address entered
        if (string.IsNullOrEmpty(IpAddressToBan))
        {
            return;
        }

        ShowSpinner = true;

        // Ban the players
        await PlayFabService.BanSinglePlayerAsync(IpAddressToBan, masterPlayerAccountId, customId, titleId, id);

        // Reload the data again
        _players = await PlayFabService.GetPlayersAsync(IpAddressToBan);

        ShowSpinner = false;

        StateHasChanged();
    }

    private async Task SearchPlayersByIp()
    {
        try
        {
            // Check for null and do nothing if no IP Address entered
            if (string.IsNullOrEmpty(IpAddressToBan))
            {
                return;
            }

            ShowLoadingBar = true;

            _players = await PlayFabService.GetPlayersAsync(IpAddressToBan);

            ShowLoadingBar = false;
        }
        catch (Exception ex)
        {
            throw new Exception("Incorrect Credentials", ex);
        }
    }

}